name: Release

on:
  push:
    branches: ["create"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  create_apt_package_windows:
    name: Create apt package for Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive
    
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.13
    
    - uses: taiki-e/install-action@v2
    
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "10.0"

    # - name: Get Usearch version
    #   id: version
    #   run: |
    #     set /p version=<VERSION
    #     echo %version% >> $GITHUB_OUTPUT

    - name: Build Usearch lib
      run: |
        set /p version=<VERSION
        $env:CC = "clang"
        $env:CXX = "clang++"
        cd c/ && g++ -std=c++11 -o libusearch.dll -O3 lib.cpp -I.  -I ../include/  -I ../fp16/include/ -I ../robin-map/include/ -shared

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "c/*.dll"
        update_latest_release: true


  create_apt_packages_macOS:
    name: Create brew package for macOS
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "10.0"

    - name: Get Usearch version
      id: version
      run: |
        version=$(cat VERSION)
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Build Usearch lib
      run: |
        export CC=clang
        export CXX=clang++
        cp c/usearch.h golang/
        cd golang && make -C ../c libusearch_c.so && mv ../c/libusearch_c.so libusearch_c.a
        zip -r usearch_macOS_${{ steps.version.outputs.version }}.zip libusearch_c.a usearch.h

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "golang/usearch_macOS_${{ steps.version.outputs.version }}.zip"
        update_latest_release: true


  create_apt_packages_linux:
    name: Create apt package for Linux on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["linux/amd64", "linux/arm64"]
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760

    - name: Get docker daemon IP
      id: dockerip
      run: |
        docker_ip=$(ip addr show docker0 | grep -Po 'inet \K[\d.]+') && \
        echo "docker_ip=$docker_ip" >> "$GITHUB_OUTPUT"

    - name: Set new password for runner user
      id: userpass
      run: |
        user_pass="1122"
        echo "runner:$user_pass" | sudo chpasswd
        echo "user_pass=$user_pass" >> "$GITHUB_OUTPUT"
          
    - name: Build Usearch lib
      run: |
        docker buildx create --use
        docker buildx build \
        --platform ${{ matrix.arch }} \
        --build-arg docker_ip=${{ steps.dockerip.outputs.docker_ip }} \
        --build-arg user_pass=${{ steps.userpass.outputs.user_pass }} \
        --file ./Dockerfile.libs \
        --tag unum/ustore-deps:latest \
        --load .

    - name: Clear Docker buildx cache
      run: docker buildx prune --all --force

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "*.deb"
        update_latest_release: true

