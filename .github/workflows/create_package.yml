name: Release

on:
  push:
    branches: ["create-packages"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # create_apt_package_windows:
  #   name: Create apt package for Windows
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       persist-credentials: false
  #       ref: 'create-packages'
  #   - run: git submodule update --init --recursive
    
  #   - name: Setup cmake
  #     uses: jwlawson/actions-setup-cmake@v1.13
    
  #   - uses: taiki-e/install-action@v2
    
  #   - name: Set up GCC
  #     uses: egor-tensin/setup-mingw@v2
  #     with:
  #       platform: x64

  #   - run: |
  #       cd c/ && g++ -std=c++17 -o libusearch_c.dll lib.cpp -I. -I ../include/ -I ../fp16/include/ -I ../robin-map/include/ && cd ../
  #       cd golang && mv ../c/libusearch_c.dll libusearch_c.dll && go test -v

  create_apt_package_linux:
    name: Create apt package for Linux
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive

    - run: brew install gcc@12

    - run: |
        cd c/ && g++ -std=c++17 -o libusearch_c.a lib.cpp -I. -I ../include/ -I ../fp16/include/ -I ../robin-map/include/ && cd ../
        cd golang && mv ../c/libusearch_c.a libusearch_c.a && go test -v



  create_apt_package_macOS:
    name: Create apt package for macOS
    runs-on: macOS-latest
    strategy:
      matrix:
        arch: ["linux/amd64", "linux/arm64"]
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64, amd64'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760
        platforms: linux/arm64, linux/amd64

      # - name: Get docker daemon IP
      #   id: dockerip
      #   run: |
      #     docker_ip=$(ip addr show docker0 | grep -Po 'inet \K[\d.]+') && \
      #     echo "docker_ip=$docker_ip" >> "$GITHUB_OUTPUT"

      # - name: Set new password for runner user
      #   id: userpass
      #   run: |
      #     user_pass="1122"
      #     echo "runner:$user_pass" | sudo chpasswd
      #     echo "user_pass=$user_pass" >> "$GITHUB_OUTPUT"
          
    - name: Create Conan packages ARM for Python SDK
      run: |
        docker buildx create --use
        docker buildx build \
        --platform ${{ matrix.arch }} \
        --file ./Dockerfile.libs \
        --tag unum/ustore-deps:latest \
        --load .

    - name: Clear Docker buildx cache
      run: docker buildx prune --all --force

    # - name: Upload archive to release Assets
    #   uses: xresloader/upload-to-github-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     file: ustore_deps_arm_linux_python.tar.gz
    #     update_latest_release: true

