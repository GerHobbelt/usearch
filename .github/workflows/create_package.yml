name: Release

on:
  push:
    branches: ["create-packages"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  create_apt_package_windows:
    name: Create apt package for Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive
    
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.13
    
    - uses: taiki-e/install-action@v2
    
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.19.0'

    - name: Install MinGW Dependencies (Linux)
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64

    - name: Get Version
      id: set_version
      shell: bash
      run: |
        version=$(cat VERSION)
        echo "version=$version" >> $GITHUB_OUTPUT
        
    - name: Build Usearch lib
      run: |
        cd c/ && g++ -std=c++11 -o libusearch.dll -O3 lib.cpp -I.  -I ../include/  -I ../fp16/include/ -I ../robin-map/include/ -shared && cd ..
        cp c/libusearch.dll golang/libusearch.dll && cp c/usearch.h golang/usearch.h && cd golang/ && go test -v
        tar -cvf usearch_windows_${{ steps.set_version.outputs.version }}.tar .\libusearch.dll .\usearch.h

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "golang/usearch_windows_${{ steps.set_version.outputs.version }}.tar"
        update_latest_release: true


  create_apt_packages_macOS:
    name: Create brew package for macOS
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'

    - run: git submodule update --init --recursive
    
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.21.0'

    - name: Get Usearch version
      id: version
      run: |
        version=$(cat VERSION)
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Build usearch library on arm
      run: |
        cd c/ && clang++ -std=c++11 -o libusearch.so -O3 lib.cpp -I.  -I ../include/  -I ../fp16/include/ -I ../robin-map/include/ -shared -target arm64-apple-macos11 && cd ..
        cp c/usearch.h golang/
        cp c/libusearch.so golang/libusearch.so && cd golang/ 
        zip -r usearch_macOS_arm_${{ steps.version.outputs.version }}.zip libusearch.so usearch.h && rm -rf libusearch.so

    - name: Build usearch library on amd
      run: |
        cd c/ && clang++ -std=c++11 -o libusearch.so -O3 lib.cpp -I.  -I ../include/  -I ../fp16/include/ -I ../robin-map/include/ -shared -target x86_64-apple-macos10.12 && cd ..
        cp c/usearch.h golang/
        cp c/libusearch.so golang/libusearch.so && cd golang/ && go test -v
        zip -r usearch_macOS_amd_${{ steps.version.outputs.version }}.zip libusearch.so usearch.h

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "golang/*.zip"
        update_latest_release: true


  create_apt_packages_linux:
    name: Create apt package for Linux on ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["linux/amd64", "linux/arm64"]
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'create-packages'
    - run: git submodule update --init --recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760

    - name: Get docker daemon IP
      id: dockerip
      run: |
        docker_ip=$(ip addr show docker0 | grep -Po 'inet \K[\d.]+') && \
        echo "docker_ip=$docker_ip" >> "$GITHUB_OUTPUT"

    - name: Set new password for runner user
      id: userpass
      run: |
        user_pass="1122"
        echo "runner:$user_pass" | sudo chpasswd
        echo "user_pass=$user_pass" >> "$GITHUB_OUTPUT"
          
    - name: Build Usearch lib
      run: |
        docker buildx create --use
        docker buildx build \
        --platform ${{ matrix.arch }} \
        --build-arg docker_ip=${{ steps.dockerip.outputs.docker_ip }} \
        --build-arg user_pass=${{ steps.userpass.outputs.user_pass }} \
        --file ./Dockerfile.libs \
        --tag unum/ustore-deps:latest \
        --load .

    - name: Clear Docker buildx cache
      run: docker buildx prune --all --force

    - name: Upload archive to release Assets
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "*.deb"
        update_latest_release: true

